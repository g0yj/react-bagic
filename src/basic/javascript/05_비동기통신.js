/** 호출 스택 ======================================
 * : 자바스크립트에서 수행해야 할 코드나 함수를 순차적으로 담아두는 스택.
 */
function bar() {
    console.log('bar');
}

function baz() {
    console.log('baz');
}

function foo() {
    console.log('foo');
    bar();
    baz();
}

foo();

//1. foo() 가 호출 스택에 먼저 들어감
//2. foo() 내부의 console.log가 존재하므로 호출 스택에 들어감
//3. 완료된 이후에 다음 코드로 넘어감 (foo()는 아직 존재)
//4. bar()가 호출 스택으로 들어감
//5. bar() 내부의 console.log가 존재하므로 호출 스택에 들어감
//6. 완료 후 다음 코드로 넘어감 (foo(), bar() 아직 존재)
//7. 더 이상 bar()에 남은게 존재하지 않음. -> 호출스택에서 제거 (foo()존재)
//8. baz() 가 호출 스택으로 들어감
//9. console.log가 호출 스택에 들어감
//10. 9번이 실행 완료되면 다음 코드로 넘어감(foo(), baz() 존재)
//11. 더 이상 baz()에 남은 것이 없어 호출 스택에서 제거 (foo() 존재)
//12. 더 이상 foo()에 남은 것이 없어 호출 스택에서 제거
//13. 호출 스택이 완전 비워짐.

/** 이벤트 루프 ==============================
 * : 호출 스택이 비어 있는지 여부를 확인하는 것이 이벤트 루프임.
 * 이벤트 루프는 단순히 이벤트 루프만의 단일 스레드 내부에서 이 호출 스택 내부에 수행해야 할 작업이 있는지 확인하고, 수행해야 할 코드가 있다면 자바스크립트엔진을 이용해 실행
 * 한가지 알아둘 점은 코드를 실행하는 것과 호출 스택이 비어있는지 확인하는 것 모두가 단일 스레드에서 일어난다는 것임!
 * 두 작업은 동시에 일어날 수 없으며 한스레드에서 순차적으로 일어남.
 * 
 * 이벤트 루프의 역할은 호출 스택에 실행 중인 코드가 있는지, 태스크 큐에 대기 중인 함수가 있는지 반복해서 확인하는 역할을함.
 * 호출 스택이 비었다면 태스크 큐에 대기 중인 작업이 있는지 확인하고 이 작업을 실행 가능한 오래된 것부터 순차적으로 꺼내와 실행.
*/

/** 비동기 작업=============================================== */
function bar1() {
    console.log('bar1');
}

function baz1() {
    console.log('baz1');
}

function foo1() {
    console.log('foo');
    setTimeout(bar1(), 0); //setTimeout만 추가함!
    baz1();
}

foo1();

//1. foo()가 호출 스택에 들어감
//2. foo() 내부에 console.log가 존재하므로 호출 스택에 들어감
//3. 2실행 완료 후 다음 코드로 넘어감(foo1()존재)
//4. setTimeout(bar1, 0)이 호출 스택에 들어감
//5. 4번에 대해 타이머 이벤트가 실행되며 태스크 큐로 들어가고 그 대신 바로 스택에서 제거됨
//6. baz1()가 호출 스택에 들어감
//7. baz1() 내부에 console.log가 존재하므로 호출 스택에 들어감
//8. 7 실행이 완료된 이후 다음 코드로 넘어감 (foo(), baz() 존재)
//9. 더 이상 baz()에 남은 것이 없어 호출 스택에서 제거 (foo() 존재)
//10. 더 이상 foo()에 남은 것이 없으므로 호출 스택에서 제거됨
//11. 호출 스택이 완전히 비워짐
//12. 이벤트 루프가 호출 스택이 비워져 있다는 걸 확인함. 태스크 큐를 확인하니, 4번에 들어갔던 내용이 있음. bar()를 호출 스택으로 들여보냄
//13. bar() 내부에 console.log 가 존재하므로 호출 스택에 들어감
//14. 13 실행이 끝난 뒤 다음 코드로 넘어감 (bar() 존재)
//15. 더 이상 bar()에 남은 것이 없으므로 호출 스택에서 제거!

/** 태스크 큐
 *  : 실행해야 할 태스크의 집합을 의미. 
 *      이벤트 루프는 이러한 태스크 큐를 한 개 이상 가지고 있고 이름과 다르게 태스크 큐는 자료 구조의 큐가 아닌 set 형태를 띔.
 *      선택된 큐 중에 실행 가능한 가장 오래된 태스크를 가져와야하기 때문임. 큐는 무조건 앞에 있는걸 가져오는 형식으로 꺼내와야하나
 *      태스크 큐는 그렇지 않음! 
 *      태스크 큐에서 의미하는 '실행해야 할 태스크'라는 건 비동기함수의 콜백 함수나 이벤트 핸들러등을 의미함
 * 
 */


/** 비동기 함수는 누가 수행하느냐???? n초 뒤에 setTimeout을 요청하는 작업은 누가 처리하는가.
 * fetch를 기반으로 실행되는 네트워크 요청은 누가 보내고 응답 받을 것인가...
 * 이런 작업들은 모두 자바스크립트 코드가 동기식으로 실행되는 메인 스레드가 아닌 태스크 큐가 할당되는 별도의 스레드에서 수행됨.
 * 브라우저나 node.js의 역할!
 * 자바스크립트 코드 실행은 싱글 스레드에서 이루어지나, 이러한 외부 Web API등은 모두 자바스크립트 코드 외부에서 실행되고
 * 콜백이 태스크 큐로 들어가는 것임. 이벤트 루프는 호출 스택이 비고, 콜백이 실행 가능한 때가 오면 이것을 꺼내서 수행하는 역할만 함.
 * 
 * 비동기 작업을 수행하는 태스크 큐의 구조! (태스크 큐와 마이크로 태스크 큐)
 * 
 * 태스크 큐 : setTimeout, setInterval, setImmediate
 * 마이크로 태스크 큐 : process.nextTick, Promises, queueMicroTask , MutationObserver
 * 
 * 마이크로 태스크 큐는 기존 태스크 큐보다 우선권을 가짐.
 */